"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkStack = void 0;
const cdk = require("aws-cdk-lib");
const ec2 = require("aws-cdk-lib/aws-ec2");
class NetworkStack extends cdk.Stack {
    vpc;
    userServiceSecurityGroup;
    databaseSecurityGroup;
    albSecurityGroup;
    constructor(scope, id, props) {
        super(scope, id, props);
        // Create VPC with public and private subnets
        this.vpc = new ec2.Vpc(this, 'EdTechVPC', {
            ipAddresses: ec2.IpAddresses.cidr('10.0.0.0/16'),
            maxAzs: 3,
            subnetConfiguration: [
                {
                    cidrMask: 24,
                    name: 'Public',
                    subnetType: ec2.SubnetType.PUBLIC,
                },
                {
                    cidrMask: 24,
                    name: 'Private',
                    subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS,
                },
                {
                    cidrMask: 24,
                    name: 'Database',
                    subnetType: ec2.SubnetType.PRIVATE_ISOLATED,
                },
            ],
            natGateways: props.environment === 'production' ? 3 : 1,
            enableDnsHostnames: true,
            enableDnsSupport: true,
        });
        // Application Load Balancer Security Group
        this.albSecurityGroup = new ec2.SecurityGroup(this, 'ALBSecurityGroup', {
            vpc: this.vpc,
            description: 'Security group for Application Load Balancer',
            allowAllOutbound: true,
        });
        this.albSecurityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(80), 'Allow HTTP traffic');
        this.albSecurityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(443), 'Allow HTTPS traffic');
        // User Service Security Group
        this.userServiceSecurityGroup = new ec2.SecurityGroup(this, 'UserServiceSecurityGroup', {
            vpc: this.vpc,
            description: 'Security group for User Service containers',
            allowAllOutbound: true,
        });
        this.userServiceSecurityGroup.addIngressRule(this.albSecurityGroup, ec2.Port.tcp(3000), 'Allow traffic from ALB to User Service');
        // Database Security Group
        this.databaseSecurityGroup = new ec2.SecurityGroup(this, 'DatabaseSecurityGroup', {
            vpc: this.vpc,
            description: 'Security group for RDS PostgreSQL database',
            allowAllOutbound: false,
        });
        this.databaseSecurityGroup.addIngressRule(this.userServiceSecurityGroup, ec2.Port.tcp(5432), 'Allow PostgreSQL access from User Service');
        // VPC Endpoints for cost optimization
        this.vpc.addGatewayEndpoint('S3Endpoint', {
            service: ec2.GatewayVpcEndpointAwsService.S3,
            subnets: [{ subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS }],
        });
        this.vpc.addInterfaceEndpoint('SecretsManagerEndpoint', {
            service: ec2.InterfaceVpcEndpointAwsService.SECRETS_MANAGER,
            subnets: { subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS },
            securityGroups: [this.userServiceSecurityGroup],
        });
        this.vpc.addInterfaceEndpoint('EventBridgeEndpoint', {
            service: ec2.InterfaceVpcEndpointAwsService.EVENTBRIDGE,
            subnets: { subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS },
            securityGroups: [this.userServiceSecurityGroup],
        });
        // Outputs
        new cdk.CfnOutput(this, 'VpcId', {
            value: this.vpc.vpcId,
            description: 'VPC ID',
            exportName: `${props.environment}-VpcId`,
        });
        new cdk.CfnOutput(this, 'UserServiceSecurityGroupId', {
            value: this.userServiceSecurityGroup.securityGroupId,
            description: 'User Service Security Group ID',
            exportName: `${props.environment}-UserServiceSecurityGroupId`,
        });
        new cdk.CfnOutput(this, 'DatabaseSecurityGroupId', {
            value: this.databaseSecurityGroup.securityGroupId,
            description: 'Database Security Group ID',
            exportName: `${props.environment}-DatabaseSecurityGroupId`,
        });
    }
}
exports.NetworkStack = NetworkStack;
//# sourceMappingURL=data:application/json;base64,