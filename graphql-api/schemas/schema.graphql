# EdTech Platform Supergraph Schema
# This file will be automatically generated by schema composition
# DO NOT EDIT MANUALLY

directive @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String) repeatable on SCHEMA

scalar join__FieldSet

enum join__Graph {
  USER_SERVICE @join__graph(name: "user-service", url: "http://localhost:3001/graphql")
  LEARNING_SERVICE @join__graph(name: "learning-service", url: "http://localhost:3002/graphql")
  CONTENT_SERVICE @join__graph(name: "content-service", url: "http://localhost:3003/graphql")
  PAYMENT_SERVICE @join__graph(name: "payment-service", url: "http://localhost:3004/graphql")
  TUTOR_MATCHING_SERVICE @join__graph(name: "tutor-matching-service", url: "http://localhost:3005/graphql")
  COMMUNICATION_SERVICE @join__graph(name: "communication-service", url: "http://localhost:3006/graphql")
  REVIEWS_SERVICE @join__graph(name: "reviews-service", url: "http://localhost:3007/graphql")
  ANALYTICS_SERVICE @join__graph(name: "analytics-service", url: "http://localhost:3008/graphql")
}

schema @link(url: "https://specs.apollo.dev/federation/v2.0", import: ["@key", "@requires", "@provides", "@external", "@tag", "@extends", "@shareable", "@inaccessible", "@override", "@composeDirective"]) {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query

type Mutation

type Subscription

# EdTech Platform GraphQL Schema

# User Management
type User {
  id: ID!
  email: String!
  profile: UserProfile!
  isTutor: Boolean!
  tutorProfile: TutorProfile
  socialAccounts: [SocialAccount!]!
  isActive: Boolean!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type UserProfile {
  firstName: String!
  lastName: String!
  fullName: String!
  timezone: String
  locale: String
  preferredLanguage: String
  videoIntroUrl: String
  onboardingCompleted: Boolean!
}

type TutorProfile {
  isActive: Boolean!
  hourlyRate: Float
  currency: String
  subjects: [String!]!
  languages: [String!]!
  experience: String
  education: String
  description: String
  rating: Float
  totalReviews: Int!
  availability: TutorAvailability
}

type TutorAvailability {
  timezone: String!
  weeklySchedule: [WeeklySlot!]!
  exceptions: [AvailabilityException!]!
}

type WeeklySlot {
  dayOfWeek: DayOfWeek!
  startTime: String! # HH:mm format
  endTime: String!   # HH:mm format
}

type AvailabilityException {
  date: AWSDate!
  isAvailable: Boolean!
  startTime: String
  endTime: String
  reason: String
}

type SocialAccount {
  provider: SocialProvider!
  providerEmail: String!
  linkedAt: AWSDateTime!
}

# Learning Management
type Course {
  id: ID!
  title: String!
  description: String!
  tutor: User!
  subject: String!
  level: CourseLevel!
  duration: Int! # minutes
  price: Float!
  currency: String!
  rating: Float
  totalReviews: Int!
  enrollmentCount: Int!
  isActive: Boolean!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Lesson {
  id: ID!
  course: Course!
  title: String!
  description: String
  duration: Int! # minutes
  videoUrl: String
  materials: [LessonMaterial!]!
  order: Int!
  isPublished: Boolean!
}

type LessonMaterial {
  id: ID!
  title: String!
  type: MaterialType!
  url: String!
  size: Int
}

# Booking & Sessions
type Booking {
  id: ID!
  student: User!
  tutor: User!
  course: Course
  scheduledAt: AWSDateTime!
  duration: Int! # minutes
  status: BookingStatus!
  price: Float!
  currency: String!
  notes: String
  createdAt: AWSDateTime!
}

type Session {
  id: ID!
  booking: Booking!
  startTime: AWSDateTime
  endTime: AWSDateTime
  status: SessionStatus!
  recordingUrl: String
  notes: String
  rating: SessionRating
}

type SessionRating {
  studentRating: Int
  tutorRating: Int
  studentFeedback: String
  tutorFeedback: String
  createdAt: AWSDateTime!
}

# Communication
type Conversation {
  id: ID!
  participants: [User!]!
  lastMessage: Message
  unreadCount: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Message {
  id: ID!
  conversation: Conversation!
  sender: User!
  content: String!
  type: MessageType!
  attachments: [MessageAttachment!]!
  createdAt: AWSDateTime!
}

type MessageAttachment {
  id: ID!
  type: AttachmentType!
  url: String!
  fileName: String!
  size: Int!
}

# Enums
enum SocialProvider {
  GOOGLE
  FACEBOOK
  APPLE
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum MaterialType {
  PDF
  VIDEO
  AUDIO
  DOCUMENT
  PRESENTATION
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum SessionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum MessageType {
  TEXT
  FILE
  BOOKING_REQUEST
  BOOKING_CONFIRMATION
  SYSTEM
}

enum AttachmentType {
  IMAGE
  DOCUMENT
  AUDIO
  VIDEO
}

# Inputs
input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  signupMethod: String!
  isTutor: Boolean = false
  timezone: String
  locale: String
  preferredLanguage: String
  password: String
  socialAuth: SocialAuthInput
}

input SocialAuthInput {
  provider: SocialProvider!
  providerUserId: String!
  providerEmail: String!
  accessToken: String!
}

input UpdateUserProfileInput {
  firstName: String
  lastName: String
  timezone: String
  locale: String
  preferredLanguage: String
  videoIntroUrl: String
}

input BecomeTutorInput {
  hourlyRate: Float!
  currency: String!
  subjects: [String!]!
  languages: [String!]!
  experience: String
  education: String
  description: String!
}

input CreateCourseInput {
  title: String!
  description: String!
  subject: String!
  level: CourseLevel!
  duration: Int!
  price: Float!
  currency: String!
}

input CreateBookingInput {
  tutorId: ID!
  courseId: ID
  scheduledAt: AWSDateTime!
  duration: Int!
  notes: String
}

input SendMessageInput {
  conversationId: ID!
  content: String!
  type: MessageType!
  attachments: [MessageAttachmentInput!]
}

input MessageAttachmentInput {
  type: AttachmentType!
  url: String!
  fileName: String!
  size: Int!
}

# Response types
type CreateUserResponse {
  user: User
  errors: [FieldError!]
}

type FieldError {
  field: String!
  message: String!
}

# Queries
type Query {
  # User queries
  me: User
  user(id: ID!): User
  searchTutors(
    query: String
    subjects: [String!]
    languages: [String!]
    maxHourlyRate: Float
    minRating: Float
    availability: AvailabilityFilterInput
    limit: Int = 20
    offset: Int = 0
  ): [User!]!

  # Course queries
  course(id: ID!): Course
  courses(
    subject: String
    level: CourseLevel
    tutorId: ID
    limit: Int = 20
    offset: Int = 0
  ): [Course!]!

  # Booking queries
  booking(id: ID!): Booking
  myBookings(status: BookingStatus, limit: Int = 20, offset: Int = 0): [Booking!]!

  # Communication queries
  conversation(id: ID!): Conversation
  myConversations(limit: Int = 20, offset: Int = 0): [Conversation!]!
  messages(conversationId: ID!, limit: Int = 50, offset: Int = 0): [Message!]!
}

# Mutations
type Mutation {
  # User mutations
  createUser(input: CreateUserInput!): CreateUserResponse!
  updateProfile(input: UpdateUserProfileInput!): User!
  becomeTutor(input: BecomeTutorInput!): User!
  linkSocialAccount(input: SocialAuthInput!): User!

  # Course mutations
  createCourse(input: CreateCourseInput!): Course!
  updateCourse(id: ID!, input: CreateCourseInput!): Course!
  deleteCourse(id: ID!): Boolean!

  # Booking mutations
  createBooking(input: CreateBookingInput!): Booking!
  confirmBooking(id: ID!): Booking!
  cancelBooking(id: ID!, reason: String): Booking!

  # Session mutations
  startSession(bookingId: ID!): Session!
  endSession(sessionId: ID!): Session!
  rateSession(sessionId: ID!, rating: Int!, feedback: String): Session!

  # Communication mutations
  sendMessage(input: SendMessageInput!): Message!
  markConversationAsRead(conversationId: ID!): Conversation!
}

# Subscriptions
type Subscription {
  # Real-time messaging
  messageAdded(conversationId: ID!): Message!
    @aws_subscribe(mutations: ["sendMessage"])

  # Booking updates
  bookingUpdated(userId: ID!): Booking!
    @aws_subscribe(mutations: ["createBooking", "confirmBooking", "cancelBooking"])

  # Session updates
  sessionUpdated(bookingId: ID!): Session!
    @aws_subscribe(mutations: ["startSession", "endSession"])
}

# Additional input types
input AvailabilityFilterInput {
  timezone: String!
  startDate: AWSDate!
  endDate: AWSDate!
  startTime: String!
  endTime: String!
  daysOfWeek: [DayOfWeek!]
} 