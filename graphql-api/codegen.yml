overwrite: true
schema: "./schemas/base-scalars.graphql"
documents: null
generates:
  # Generate TypeScript types from GraphQL schema
  types/generated.ts:
    plugins:
      - "typescript"
      - "typescript-resolvers"
    config:
      # General configuration
      scalars:
        AWSDateTime: "string"
        AWSDate: "string"
        AWSTime: "string"
        AWSTimestamp: "number"
        AWSJSON: "string"
        AWSEmail: "string"
        AWSURL: "string"
        AWSPhone: "string"
        AWSIPAddress: "string"
      
      # TypeScript-specific settings
      useIndexSignature: true
      skipTypename: false
      enumsAsTypes: true
      maybeValue: "T | null | undefined"
      inputMaybeValue: "T | null | undefined"
      
      # Context type for resolvers
      contextType: "./context#GraphQLContext"
      
      # Generate resolver signatures
      makeResolverTypeCallable: true
      useTypeImports: true
      
      # Federation support
      federation: true
      
      # Add custom headers
      prepend:
        - "/* eslint-disable */"
        - "/* Auto-generated GraphQL types */"
        - "/* Do not edit manually */"

  # Generate AppSync-specific resolver types
  types/appsync-types.ts:
    plugins:
      - "typescript"
    config:
      # AppSync-specific scalar mappings
      scalars:
        AWSDateTime: "string"
        AWSDate: "string" 
        AWSTime: "string"
        AWSTimestamp: "number"
        AWSJSON: "string"
        AWSEmail: "string"
        AWSURL: "string"
        AWSPhone: "string"
        AWSIPAddress: "string"
      
      # TypeScript settings for AppSync
      skipTypename: true
      enumsAsTypes: true
      maybeValue: "T | null"
      
      # Only generate input/output types for AppSync
      onlyOperationTypes: false
      
      # Custom types for AppSync events
      customTypes:
        AppSyncEvent: |
          export interface AppSyncEvent {
            fieldName: string;
            arguments: Record<string, any>;
            source?: any;
            identity?: {
              sub: string;
              email?: string;
              username?: string;
              claims?: Record<string, any>;
            };
            request?: {
              headers: Record<string, string>;
            };
            info?: {
              selectionSetList: string[];
              selectionSetGraphQL: string;
              parentTypeName: string;
              fieldName: string;
              variables: Record<string, any>;
            };
          }
        
        AppSyncContext: |
          export interface AppSyncContext {
            requestId: string;
            logStreamName: string;
            logGroupName: string;
          }
      
      # Add AppSync headers
      prepend:
        - "/* eslint-disable */"
        - "/* Auto-generated AppSync types */"
        - "/* Do not edit manually */"
        - ""
        - "export interface AppSyncEvent {"
        - "  fieldName: string;"
        - "  arguments: Record<string, any>;"
        - "  source?: any;"
        - "  identity?: {"
        - "    sub: string;"
        - "    email?: string;"
        - "    username?: string;"
        - "    claims?: Record<string, any>;"
        - "  };"
        - "  request?: {"
        - "    headers: Record<string, string>;"
        - "  };"
        - "}"
        - ""
        - "export interface AppSyncContext {"
        - "  requestId: string;"
        - "  logStreamName: string;"
        - "  logGroupName: string;"
        - "}"
        - ""

hooks:
  afterAllFileWrite:
    - prettier --write

# Configuration for schema composition integration
schemaComposition:
  # Watch for schema changes and regenerate types
  watchPattern: "schemas/**/*.graphql"
  
  # Pre-generation hooks
  beforeGenerate:
    - npm run enhanced-compose
    
  # Post-generation hooks  
  afterGenerate:
    - npm run type-check 