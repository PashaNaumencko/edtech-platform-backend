extend type Query {
  user(id: ID!): User
  users(limit: Int = 20, offset: Int = 0): [User!]!
}

extend type Mutation {
  createUser(input: CreateUserInput!): CreateUserResponse!
  updateUserProfile(id: ID!, input: UpdateUserProfileInput!): User!
  becomeTutor(id: ID!, input: BecomeTutorInput!): User!
}

type User @key(fields: "id") {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  fullName: String!
  role: UserRole!
  status: UserStatus!
  bio: String
  skills: [String!]!
  isTutor: Boolean!
  isActive: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CreateUserResponse {
  user: User
  errors: [FieldError!]
}

type FieldError {
  field: String!
  message: String!
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

input UpdateUserProfileInput {
  firstName: String
  lastName: String
  bio: String
  skills: [String!]
}

input BecomeTutorInput {
  bio: String!
  skills: [String!]!
}

enum UserRole {
  STUDENT
  TUTOR
  ADMIN
  SUPERADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

scalar DateTime