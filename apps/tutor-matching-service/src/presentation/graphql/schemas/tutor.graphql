# Tutor Matching Service GraphQL Schema

type Tutor @key(fields: "id") {
  id: ID!
  userId: String!
  bio: String!
  subjects: [TutorSubject!]!
  experienceLevel: ExperienceLevel!
  hourlyRate: Float!
  currency: String!
  languages: [String!]!
  education: String!
  status: TutorStatus!
  rating: Float!
  totalReviews: Int!
  isActive: Boolean!
  createdAt: String!
  updatedAt: String!
}

type MatchingRequest @key(fields: "id") {
  id: ID!
  studentId: String!
  subject: TutorSubject!
  preferredExperienceLevel: ExperienceLevel
  maxHourlyRate: Float
  preferredLanguages: [String!]!
  description: String
  status: MatchingRequestStatus!
  matchedTutorId: String
  matchedTutor: Tutor
  createdAt: String!
  updatedAt: String!
  expiresAt: String!
  isExpired: Boolean!
}

type TutorMatch {
  tutor: Tutor!
  matchScore: Float!
  reason: String!
}

type FieldError {
  field: String!
  message: String!
}

type CreateTutorResponse {
  tutor: Tutor
  errors: [FieldError!]!
}

type CreateMatchingRequestResponse {
  request: MatchingRequest
  errors: [FieldError!]!
}

type FindTutorsResponse {
  matches: [TutorMatch!]!
  total: Int!
}

enum TutorStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_APPROVAL
  REJECTED
}

enum TutorSubject {
  MATHEMATICS
  PHYSICS
  CHEMISTRY
  BIOLOGY
  ENGLISH
  HISTORY
  GEOGRAPHY
  COMPUTER_SCIENCE
  PROGRAMMING
  LANGUAGES
  MUSIC
  ART
  OTHER
}

enum ExperienceLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum MatchingRequestStatus {
  PENDING
  MATCHED
  CANCELLED
  EXPIRED
}

input CreateTutorInput {
  userId: String!
  bio: String!
  subjects: [TutorSubject!]!
  experienceLevel: ExperienceLevel!
  hourlyRate: Float!
  currency: String = "USD"
  languages: [String!]!
  education: String!
}

input UpdateTutorInput {
  bio: String
  subjects: [TutorSubject!]
  experienceLevel: ExperienceLevel
  hourlyRate: Float
  languages: [String!]
  education: String
}

input CreateMatchingRequestInput {
  studentId: String!
  subject: TutorSubject!
  preferredExperienceLevel: ExperienceLevel
  maxHourlyRate: Float
  preferredLanguages: [String!]
  description: String
}

input FindTutorsInput {
  subject: TutorSubject!
  experienceLevel: ExperienceLevel
  maxHourlyRate: Float
  languages: [String!]
  limit: Int = 10
  offset: Int = 0
}

type Query {
  # Tutor queries
  tutor(id: ID!): Tutor
  tutors: [Tutor!]!
  findTutors(input: FindTutorsInput!): FindTutorsResponse!
  
  # Matching request queries
  matchingRequest(id: ID!): MatchingRequest
  matchingRequests: [MatchingRequest!]!
}

type Mutation {
  # Tutor mutations
  createTutor(input: CreateTutorInput!): CreateTutorResponse!
  updateTutor(id: ID!, input: UpdateTutorInput!): Tutor
  
  # Matching request mutations
  createMatchingRequest(input: CreateMatchingRequestInput!): CreateMatchingRequestResponse!
  cancelMatchingRequest(id: ID!): MatchingRequest
}